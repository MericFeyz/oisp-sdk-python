# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
executors:
  vm-executor:
    machine:
      enabled: true
      image: ubuntu-2004:202104-01
    working_directory: ~/repo
    environment:
      shell: /bin/bash
      TERM: xterm
      TZ: "Europe/Berlin"
  docker-executor:
    docker:
      - image: circleci/node:14.17.1
    working_directory: ~/repo
    environment:
      shell: /bin/bash
      TERM: xterm
commands:
  install-sdk:
    description: "Install sdk and required testing tools."
    steps:
      - run:
          command: |
            sudo python3 setup.py install
            sudo pip3 install pylint pycodestyle pydocstyle

  checkout-platform-launcher:
    description: "Checkout Platform Launcher"
    steps:
      - run:
          name: Checkout Platform Launcher
          shell: /bin/bash
          command: |
            git clone https://github.com/Open-IoT-Service-Platform/platform-launcher.git
            cd platform-launcher
            git checkout develop
            git submodule init
            git submodule update
            yes | make update
  setup-platform-launcher:
    description: "Setup Platform Launcher"
    steps:
      - run:
          shell: /bin/bash
          name: Setup build environment
          command: |
            cd platform-launcher/util && \
            bash setup-ubuntu20.04.sh
            # create 8GB swap
            sudo dd if=/dev/zero of=/swapfile bs=1M count=8000
            sudo mkswap /swapfile
            sudo swapon /swapfile
  pull-images-and-deploy-then-forward:
    description: "Pull images, build, deploy and port forward the platform launcher"
    steps:
      - run:
          shell: /bin/bash
          name: Pull images, build, deploy and port forward the platform launcher 
          command: |
            cd platform-launcher
            if docker login  -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD};
            then
                DOCKER_TAG="latest" docker-compose pull
            else
                echo "Docker Credentials are wrong."
                exit 1
            fi
            make build DEBUG=true DOCKERUSER=${DOCKER_USERNAME} DOCKERPASS=${DOCKER_PASSWORD}
            make deploy-oisp-test DEBUG=true USE_LOCAL_REGISTRY=true
            bash wait-until-ready.sh
            sleep 1m
            FRONTEND_POD=$(kubectl -n oisp get pods | grep frontend | cut -f 1 -d " ")
            kubectl -n oisp port-forward ${FRONTEND_POD} 4001:4001
            
  check-signed:
    description: "Check whether latest commit is signed"
    steps:
      - run:
          shell: /bin/bash
          name: Check whether most recent commit is signed
          command: |
            MESSAGE=`git log -1 --pretty=%B`
            echo "Checking whether signed"
            if [[ "${MESSAGE}" == *Signed-off-by:*@* ]]; then
              echo "Commit is signedoff"
            else
              echo "Commit is not signedoff"
              exit 1
            fi
  lint:
    description: "Run linters for code and comments."
    steps:
      - run:
          shell: /bin/bash
          command: |
            pylint oisp --score=n || exit 1
            pycodestyle oisp || exit 1
            pycodestyle test || exit 1
            pydocstyle oisp --add-ignore=D105 || exit 1
          
  do-e2e-test:
    description: "Run SDK's e2e test"
    steps:
      - run:
          shell: /bin/bash
          name: Run SDK\'s tests connecting to the hosted platform launcher
          command: |
            make test
jobs:
  e2e-test:
    executor: vm-executor
    steps:
      - check-signed
      - checkout-platform-launcher
      - setup-platform-launcher
      - pull-images-and-deploy-then-forward
      - install-sdk
      - lint
      - do-e2e-test

workflows:
  version: 2.1
  workflow:
    jobs:
      - e2e-test

